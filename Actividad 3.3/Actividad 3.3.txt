# Activity 3.3 - Practicando los lenguajes libres de contexto

## Names

- Sebastian Moncada
- Samuel Acevedo

## Exercises

1. **BNF**

   ** BNF - Module **
   <def-module> ::= defmodule <module-name> do\n <body>\n end
   <module-name> ::= <upper_id>
   <body> ::= <function> | <function> <body>

   ** BNF - Function **
   <simple-func> ::= <def-func> <func-name>(<parameters>) do <output> end |
   <def-func> <func-name>(<parameters>), do: <output>
   <def-func> ::= def | defp
   <func-name> ::= <id>
   <parameters> ::= <parameters_list>
   <parameters_list> ::= <parameter> | <parameter> <parameters_list>
   <parameter> ::= <id>
   <output> ::= <statement> | <statement> <output>
   <statement> ::= <id>

   <id> ::= <letter> | <digit> | <id> <id> | <id> <\_>
   <upper_id> ::= <upper_letter> <id>

   <letter> ::= a | b | c | ... | z 
   <upper_letter> ::= A | B | C | ... | Z
   <digit> ::= 0 | 1 | 2 | 3 | ... | 9

2. **EBNF**

   ** EBNF - Module **
   DEF-MODULE ::= 'defmodule' MODULE-NAME 'do' BODY 'end'
   MODULE-NAME ::= UPPER_ID
   BODY ::= FUNCTION | FUNCTION BODY

   ** EBNF - Function **
   SIMPLE-FUNC ::= DEF-FUNC FUNC-NAME'('PARAMETERS')' 'do' OUTPUT 'end' |
   DEF-FUNC FUNC-NAME'('PARAMETERS')' ', do:' BODY
   DEF-FUNC ::= 'def' | 'defp'
   FUNC-NAME ::= ID
   PARAMETERS ::= PARAMETERS_LIST
   PARAMETERS_LIST ::= PARAMETER | PARAMETER PARAMETERS_LIST
   PARAMETER ::= ID
   OUTPUT ::= STATEMENT | STATEMENT OUTPUT
   STATEMENT ::= ID

   ID ::= LETTER | DIGIT | ID ID | ID '\_'
   UPPER_ID ::= UPPER_LETTER ID

   LETTER ::= 'a' | 'b' | 'c' | ... | 'z'
   UPPER_LETTER ::= 'A' | 'B' | 'C' | ... | 'Z'
   DIGIT ::= '0' | '1' | '2' | '3' | ... | '9'